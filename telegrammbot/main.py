import requests
import matplotlib.pyplot as plt
import io
import datetime
from datetime import timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

TOKEN = "8379655504:AAHxYcV90_w-JNP6n0lH_w_NVyGVnf4hjr4"

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
EXCHANGERATE_API_URL = "8379655504:AAHxYcV90_w-JNP6n0lH_w_NVyGVnf4hjr4"
BINANCE_API_URL = "https://api.binance.com/api/v3/ticker/price"



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
keyboard = [
    ['üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', 'üìä –ì—Ä–∞—Ñ–∏–∫–∏'],
    ['üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
POPULAR_CURRENCIES = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF', 'CAD', 'AUD', 'SGD', 'HKD', 'TRY']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç.\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã, –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def get_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë –†–§
        response = requests.get(CBR_API_URL)
        data = response.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
        message = "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§:\n\n"
        
        for currency in POPULAR_CURRENCIES:
            if currency in data['Valute']:
                rate = data['Valute'][currency]['Value']
                nominal = data['Valute'][currency]['Nominal']
                if nominal > 1:
                    message += f"‚Ä¢ {currency}: {rate:.2f} ‚ÇΩ (–∑–∞ {nominal} –µ–¥.)\n"
                else:
                    message += f"‚Ä¢ {currency}: {rate:.2f} ‚ÇΩ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        message += "\nüîó –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (Binance):\n"
        
        crypto_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT']
        for pair in crypto_pairs:
            try:
                response = requests.get(f"{BINANCE_API_URL}?symbol={pair}")
                crypto_data = response.json()
                price = float(crypto_data['price'])
                message += f"‚Ä¢ {pair[:-4]}: ${price:.2f}\n"
            except:
                message += f"‚Ä¢ {pair[:-4]}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
        
        message += f"\nüìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data['Date'][:10]}"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await update.message.reply_text(message)

async def convert_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
        )
        return
    
    try:
        amount = float(context.args[0])
        from_currency = context.args[1].upper()
        to_currency = context.args[2].upper()
        
        response = requests.get(CBR_API_URL)
        data = response.json()
        
        if from_currency == 'RUB':
            if to_currency not in data['Valute']:
                await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            rate = data['Valute'][to_currency]['Value']
            nominal = data['Valute'][to_currency]['Nominal']
            result = amount / (rate / nominal)
            await update.message.reply_text(
                f"üí∞ {amount} RUB = {result:.2f} {to_currency}\n"
                f"–ö—É—Ä—Å: 1 {to_currency} = {rate/nominal:.2f} RUB"
            )
        
        elif to_currency == 'RUB':
            if from_currency not in data['Valute']:
                await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            rate = data['Valute'][from_currency]['Value']
            nominal = data['Valute'][from_currency]['Nominal']
            result = amount * (rate / nominal)
            await update.message.reply_text(
                f"üí∞ {amount} {from_currency} = {result:.2f} RUB\n"
                f"–ö—É—Ä—Å: 1 {from_currency} = {rate/nominal:.2f} RUB"
            )
        
        else:
            if from_currency not in data['Valute'] or to_currency not in data['Valute']:
                await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            from_rate = data['Valute'][from_currency]['Value']
            from_nominal = data['Valute'][from_currency]['Nominal']
            to_rate = data['Valute'][to_currency]['Value']
            to_nominal = data['Valute'][to_currency]['Nominal']
            
            rub_amount = amount * (from_rate / from_nominal)
            result = rub_amount / (to_rate / to_nominal)
            
            await update.message.reply_text(
                f"üí∞ {amount} {from_currency} = {result:.2f} {to_currency}\n"
                f"–ß–µ—Ä–µ–∑ RUB: 1 {from_currency} = {from_rate/from_nominal:.2f} RUB, "
                f"1 {to_currency} = {to_rate/to_nominal:.2f} RUB"
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
        )

async def show_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        keyboard = []
        row = []
        for i, currency in enumerate(POPULAR_CURRENCIES, 1):
            row.append(InlineKeyboardButton(currency, callback_data=f"graph_{currency}"))
            if i % 4 == 0:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=reply_markup)
        return
    
    currency = context.args[0].upper()
    await generate_currency_graph(update, context, currency)

async def generate_currency_graph(update: Update, context: ContextTypes.DEFAULT_TYPE, currency: str):
    try:
        end_date = datetime.datetime.now()
        start_date = end_date - timedelta(days=7)
        
        dates = []
        rates = []
        
        current_date = start_date
        while current_date <= end_date:
            date_str = current_date.strftime("%Y/%m/%d")
            api_url = f"https://www.cbr-xml-daily.ru/archive/{date_str}/daily_json.js"
            
            try:
                response = requests.get(api_url, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if currency in data['Valute']:
                        rate = data['Valute'][currency]['Value']
                        nominal = data['Valute'][currency]['Nominal']
                        dates.append(current_date)
                        rates.append(rate / nominal)
            except:
                pass
            
            current_date += timedelta(days=1)
        
        if not dates:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if hasattr(update, 'message'):
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            else:
                await update.callback_query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return
        
        plt.figure(figsize=(10, 5))
        plt.plot(dates, rates, marker='o', linestyle='-')
        plt.title(f'–ö—É—Ä—Å {currency} –∫ RUB –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö—É—Ä—Å (RUB)')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if hasattr(update, 'message'):
            await update.message.reply_photo(
                photo=buf,
                caption=f"–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            )
        else:
            await update.callback_query.message.reply_photo(
                photo=buf,
                caption=f"–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        if hasattr(update, 'message'):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('graph_'):
        currency = query.data.split('_')[1]
        # –ü–µ—Ä–µ–¥–∞–µ–º query –≤–º–µ—Å—Ç–æ update –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await generate_currency_graph(query, context, currency)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã\n"
        "üìä –ì—Ä–∞—Ñ–∏–∫–∏ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞\n"
        "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
        "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /convert 100 USD RUB\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n"
        "/graph <–≤–∞–ª—é—Ç–∞> - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /graph USD\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, GBP, JPY, CNY, CHF, CAD, AUD, SGD, HKD, TRY"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        await get_rates(update, context)
    elif text == 'üìä –ì—Ä–∞—Ñ–∏–∫–∏':
        await show_graph(update, context)
    elif text == 'üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä':
        await update.message.reply_text(
            "–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
        )
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await help_command(update, context)

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rates", get_rates))
    app.add_handler(CommandHandler("convert", convert_currency))
    app.add_handler(CommandHandler("graph", show_graph))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()